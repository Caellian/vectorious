{"version":3,"sources":["vectorious-4.1.2.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","vectorious","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"Matrix","data","options","type","Float64Array","shape","buffer","ArrayBuffer","fromTypedArray","Array","fromArray","Vector","Object","create","prototype","constructor","array","j","c","add","b","matrix","d1","d2","subtract","scale","scalar","zeros","k","ones","random","Math","multiply","r1","c1","r2","c2","sum","transpose","tmp","inverse","m","identity","augmented","augment","gauss","left","right","set","get","equals","pivot","leadValue","copy","lead","swap","pivotize","row","result","sign","abs","lu","plu","ipiv","lower","upper","max","diag","p","Int32Array","size","magic","x","y","min","determinant","pop","product","trace","diagonal","value","slice","copyWithin","map","callback","each","toString","push","subarray","join","toArray","toVector","./vector",2,3,"combine","vector","l1","l2","normalize","magnitude","project","dot","count","range","start","step","end","args","arguments","backwards","ceil","sqrt","angle","acos","index","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY",4,"nblas","error","axpy","scal","nrm2","idamax","gemm","./matrix"],"mappings":"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","file":"vectorious-4.1.2.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.vectorious = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var Vector = require('./vector');\n\n  /**\n   * @method constructor\n   * @desc Creates a `Matrix` from the supplied arguments.\n   **/\n  function Matrix (data, options) {\n    this.type = Float64Array;\n    this.shape = [];\n\n    if (data && data.buffer && data.buffer instanceof ArrayBuffer) {\n      return Matrix.fromTypedArray(data, options.shape);\n    } else if (data instanceof Array) {\n      return Matrix.fromArray(data);\n    } else if (data instanceof Vector) {\n      this.shape = options && options.shape ? options.shape : [data.length, 1];\n      this.data = new data.type(data.data);\n      this.type = data.type;\n    } else if (data instanceof Matrix) {\n      this.shape = [data.shape[0], data.shape[1]];\n      this.data = new data.type(data.data);\n      this.type = data.type;\n    }\n  }\n\n  Matrix.fromTypedArray = function (data, shape) {\n    if (data.length !== shape[0] * shape[1])\n      throw new Error(\"Shape does not match typed array dimensions.\");\n\n    var self = Object.create(Matrix.prototype);\n    self.shape = shape;\n    self.data = data;\n    self.type = data.constructor;\n\n    return self;\n  };\n\n  Matrix.fromArray = function (array) {\n    var r = array.length, // number of rows\n        c = array[0].length,  // number of columns\n        data = new Float64Array(r * c);\n\n    var i, j;\n    for (i = 0; i < r; ++i)\n      for (j = 0; j < c; ++j)\n        data[i * c + j] = array[i][j];\n\n    return Matrix.fromTypedArray(data, [r, c]);\n  };\n\n  /**\n   * Static method. Adds two matrices `a` and `b` together.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new matrix containing the sum of `a` and `b`\n   **/\n  Matrix.add = function (a, b) {\n    return new Matrix(a).add(b);\n  };\n\n  /**\n   * Adds `matrix` to current matrix.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.add = function (matrix) {\n    var r = this.shape[0],          // rows in this matrix\n        c = this.shape[1],          // columns in this matrix\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (r !== matrix.shape[0] || c !== matrix.shape[1])\n      throw new Error('sizes do not match!');\n\n    var i;\n    for (i = 0; i < r * c; i++)\n      d1[i] += d2[i];\n\n    return this;\n  };\n\n  /**\n   * Static method. Subtracts the matrix `b` from matrix `a`.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new matrix containing the difference between `a` and `b`\n   **/\n  Matrix.subtract = function (a, b) {\n    return new Matrix(a).subtract(b);\n  };\n\n  /**\n   * Subtracts `matrix` from current matrix.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.subtract = function (matrix) {\n      var r = this.shape[0],          // rows in this matrix\n          c = this.shape[1],          // columns in this matrix\n          d1 = this.data,\n          d2 = matrix.data;\n\n      if (r !== matrix.shape[0] || c !== matrix.shape[1])\n        throw new Error('sizes do not match');\n\n      var i;\n      for (i = 0; i < r * c; i++)\n        d1[i] -= d2[i];\n\n      return this;\n  };\n\n  /**\n   * Static method. Multiplies all elements of a matrix `a` with a specified `scalar`.\n   * @param {Matrix} a\n   * @param {Number} scalar\n   * @returns {Matrix} a new scaled matrix\n   **/\n  Matrix.scale = function (a, scalar) {\n    return new Matrix(a).scale(scalar);\n  };\n\n  /**\n   * Multiplies all elements of current matrix with a specified `scalar`.\n   * @param {Number} scalar\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.scale = function (scalar) {\n    var r = this.shape[0],          // rows in this matrix\n        c = this.shape[1],          // columns in this matrix\n        d1 = this.data,\n        i;\n\n    for (i = 0; i < r * c; i++)\n      d1[i] *= scalar;\n\n    return this;\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing zeros (`0`), takes an\n   * optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.zeros = function (i, j, type) {\n    if (i <= 0 || j <= 0)\n      throw new Error('invalid size');\n\n    type = type || Float64Array;\n\n    var data = new type(i * j),\n        k;\n    for (k = 0; k < i * j; k++)\n      data[k] = +0.0;\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing ones (`1`), takes an\n   * optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.ones = function (i, j, type) {\n    if (i <= 0 || j <= 0)\n      throw new Error('invalid size');\n\n    type = type || Float64Array;\n\n    var data = new type(i * j),\n        k = 0;\n    for (k = 0; k < i * j; k++)\n      data[k] = +1.0;\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing random values between\n   * `0` and `1`, takes an optional `type` argument which should be an instance\n   * of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.random = function (i, j, type) {\n    type = type || Float64Array;\n    var data = new type(i * j),\n        k;\n\n    for (k = 0; k < i * j; k++)\n      data[k] = Math.random();\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Multiplies two matrices `a` and `b` of matching dimensions.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new resultant matrix containing the matrix product of `a` and `b`\n   **/\n  Matrix.multiply = function (a, b) {\n    return a.multiply(b);\n  };\n\n  /**\n   * Multiplies two matrices `a` and `b` of matching dimensions.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new resultant matrix containing the matrix product of `a` and `b`\n   **/\n  Matrix.prototype.multiply = function (matrix) {\n    var r1 = this.shape[0],   // rows in this matrix\n        c1 = this.shape[1],   // columns in this matrix\n        r2 = matrix.shape[0], // rows in multiplicand\n        c2 = matrix.shape[1], // columns in multiplicand\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (c1 !== r2)\n      throw new Error('sizes do not match');\n\n    var data = new this.type(r1 * c2),\n        i, j, k,\n        sum;\n    for (i = 0; i < r1; i++) {\n      for (j = 0; j < c2; j++) {\n        sum = +0;\n        for (k = 0; k < c1; k++)\n          sum += d1[i * c1 + k] * d2[j + k * c2];\n\n        data[i * c2 + j] = sum;\n      }\n    }\n\n    return Matrix.fromTypedArray(data, [r1, c2]);\n  };\n\n  /**\n   * Static method. Transposes a matrix (mirror across the diagonal).\n   * @returns {Matrix} a new resultant transposed matrix\n   **/\n  Matrix.transpose = function (matrix) {\n    return new Matrix(matrix).transpose();\n  };\n\n  /**\n   * Transposes a matrix (mirror across the diagonal).\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.transpose = function () {\n    var r = this.shape[0],\n        c = this.shape[1],\n        i, j;\n\n    // prefer in-place\n    if (r === c) {\n      for (i = 0; i < r - 1; i++) {\n        for (j = i + 1; j < r; j++) {\n          var tmp = this.data[j * r + i];\n          this.data[j * r + i] = this.data[i * r + j];\n          this.data[i * r + j] = tmp;\n        }\n      }\n\n      return this;\n    }\n\n    var data = new this.type(c * r);\n    for (i = 0; i < r; i++)\n      for (j = 0; j < c; j++)\n        data[j * r + i] = this.data[i * c + j];\n\n    return Matrix.fromTypedArray(data, [c, r]);\n  };\n\n  /**\n   * Determines the inverse of any invertible square matrix using\n   * Gaussian elimination.\n   * @returns {Matrix} the inverse of the matrix\n   **/\n  Matrix.prototype.inverse = function () {\n    var l = this.shape[0],\n        m = this.shape[1];\n\n    if (l !== m)\n      throw new Error('invalid dimensions');\n\n    var identity = Matrix.identity(l);\n    var augmented = Matrix.augment(this, identity);\n    var gauss = augmented.gauss();\n\n    var left = Matrix.zeros(l, m),\n        right = Matrix.zeros(l, m),\n        n = gauss.shape[1],\n        i, j;\n    for (i = 0; i < l; i++) {\n      for (j = 0; j < n; j++) {\n        if (j < m)\n          left.set(i, j, gauss.get(i, j));\n        else\n          right.set(i, j - l, gauss.get(i, j));\n      }\n    }\n\n    if (!left.equals(Matrix.identity(l)))\n      throw new Error('matrix is not invertible');\n\n    return right;\n  };\n\n  /**\n   * Performs Gaussian elimination on a matrix.\n   * @returns {Matrix} the matrix in reduced row echelon form\n   **/\n  Matrix.prototype.gauss = function () {\n    var l = this.shape[0],\n        m = this.shape[1];\n\n    var copy = new Matrix(this),\n        lead = 0,\n        pivot,\n        i, j, k,\n        leadValue;\n\n    for (i = 0; i < l; i++) {\n      if (m <= lead)\n        return new Error('matrix is singular');\n\n      j = i;\n      while (copy.data[j * m + lead] === 0) {\n        j++;\n        if (l === j) {\n          j = i;\n          lead++;\n\n          if (m === lead)\n            return new Error('matrix is singular');\n        }\n      }\n\n      copy.swap(i, j);\n\n      pivot = copy.data[i * m + lead];\n      if (pivot !== 0) {\n        // scale down the row by value of pivot\n        for (k = 0; k < m; k++)\n          copy.data[(i * m) + k] = copy.data[(i * m) + k] / pivot;\n      }\n\n\n      for (j = 0; j < l; j++) {\n        leadValue = copy.data[j * m + lead];\n        if (j !== i)\n          for (k = 0; k < m; k++)\n            copy.data[j * m + k] = copy.data[j * m + k] - (copy.data[i * m + k] * leadValue);\n      }\n\n      lead++;\n    }\n\n    for (i = 0; i < l; i++) {\n      pivot = 0;\n      for (j = 0; j < m; j++)\n        if (!pivot)\n          pivot = copy.data[i * m + j];\n\n      if (pivot)\n        // scale down the row by value of pivot\n        for (k = 0; k < m; k++)\n          copy.data[(i * m) + k] = copy.data[(i * m) + k] / pivot;\n    }\n\n    return copy;\n  };\n\n  /**\n   * Pivots a matrix until elements are in upper triangular form\n   * @returns {Array} a tuple of the resultant pivotized matrix and its sign\n   * (used in LU factorization).\n   **/\n  Matrix.prototype.pivotize = function () {\n    var l = this.shape[0],\n        result = Matrix.identity(l),\n        sign = 1,\n        pivot,\n        lead,\n        row;\n\n    var i, j;\n    for (i = 0; i < l; i++) {\n      pivot = 0;\n      row = i;\n\n      for (j = i; j < l; j++) {\n        lead = Math.abs(this.get(j, i));\n        if (pivot < lead) {\n          pivot = lead;\n          row = j;\n        }\n      }\n\n      if (i !== row) {\n        result.swap(i, row);\n        sign *= -1;\n      }\n    }\n\n    return [result, sign];\n  };\n\n  /**\n   * Performs full LU decomposition on a matrix.\n   * @returns {Array} a triple (3-tuple) of the lower triangular resultant matrix `L`, the upper\n   * triangular resultant matrix `U` and the pivot array `ipiv`\n   **/\n  Matrix.prototype.lu = function () {\n    var r = this.shape[0],\n        c = this.shape[1],\n        plu = Matrix.plu(this),\n        ipiv = plu[1],\n        pivot = Matrix.identity(r),\n        lower = new Matrix(plu[0]),\n        upper = new Matrix(plu[0]),\n        i, j;\n\n    for (i = 0; i < r; i++)\n      for (j = i; j < c; j++)\n        lower.data[i * c + j] = i === j ? 1 : 0;\n\n    for (i = 0; i < r; i++)\n      for (j = 0; j < i && j < c; j++)\n        upper.data[i * c + j] = 0;\n\n    return [lower, upper, ipiv];\n  };\n\n  /**\n   * Static method. Performs LU factorization on current matrix.\n   * @returns {Array} an array with a new instance of the current matrix LU-\n   * factorized and the corresponding pivot Int32Array\n   **/\n  Matrix.plu = function(matrix) {\n    return new Matrix(matrix).plu();\n  };\n\n  /**\n   * Performs LU factorization on current matrix.\n   * @returns {Array} an array with the current matrix LU-factorized and the\n   * corresponding pivot Int32Array\n   **/\n  Matrix.prototype.plu = function () {\n    var data = this.data,\n        n = this.shape[0],\n        ipiv = new Int32Array(n),\n        max, abs, diag, p,\n        i, j, k;\n\n    for (k = 0; k < n; ++k) {\n      p = k;\n      max = Math.abs(data[k * n + k]);\n      for (j = k + 1; j < n; ++j) {\n        abs = Math.abs(data[j * n + k]);\n        if (max < abs) {\n          max = abs;\n          p = j;\n        }\n      }\n\n      ipiv[k] = p;\n\n      if (p !== k)\n        this.swap(k, p);\n\n      diag = data[k * n + k];\n      for (i = k + 1; i < n; ++i)\n        data[i * n + k] /= diag;\n\n      for (i = k + 1; i < n; ++i) {\n        for (j = k + 1; j < n - 1; ++j) {\n          data[i * n + j] -= data[i * n + k] * data[k * n + j];\n          ++j;\n          data[i * n + j] -= data[i * n + k] * data[k * n + j];\n        }\n\n        if(j === n - 1)\n          data[i * n + j] -= data[i * n + k] * data[k * n + j];\n      }\n    }\n\n    return [this, ipiv];\n  };\n\n  /**\n   * Static method. Augments two matrices `a` and `b` of matching dimensions\n   * (appends `b` to `a`).\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} the resultant matrix of `b` augmented to `a`\n   **/\n  Matrix.augment = function (a, b) {\n    return new Matrix(a).augment(b);\n  };\n\n  /**\n   * Augments `matrix` with current matrix.\n   * @param {Matrix} matrix\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.augment = function (matrix) {\n    if (matrix.shape.length === 0)\n     return this;\n\n    var r1 = this.shape[0],\n        c1 = this.shape[1],\n        r2 = matrix.shape[0],\n        c2 = matrix.shape[1],\n        d1 = this.data,\n        d2 = matrix.data,\n        i, j;\n\n    if (r1 !== r2)\n      throw new Error(\"Rows do not match.\");\n\n    var length = c1 + c2,\n        data = new this.type(length * r1);\n\n    for (i = 0; i < r1; i++)\n      for (j = 0; j < c1; j++)\n        data[i * length + j] = d1[i * c1 + j];\n\n    for (i = 0; i < r2; i++)\n      for (j = 0; j < c2; j++)\n        data[i * length + j + c1] = d2[i * c2 + j];\n\n    this.shape = [r1, length];\n    this.data = data;\n\n    return this;\n  };\n\n  /**\n   * Static method. Creates an identity matrix of `size`, takes an optional `type` argument\n   * which should be an instance of `TypedArray`.\n   * @param {Number} size\n   * @param {TypedArray} type\n   * @returns {Matrix} an identity matrix of the specified `size` and `type`\n   **/\n  Matrix.identity = function (size, type) {\n    if (size < 0)\n      throw new Error('invalid size');\n\n    type = type || Float64Array;\n    var matrix = Matrix.zeros(size, size, type),\n        i, j;\n    for (i = 0; i < size; i++)\n      matrix.data[i * size + i] = 1.0;\n\n    return matrix;\n  };\n\n  /**\n   * Static method. Creates a magic square matrix of `size`, takes an optional `type` argument\n   * which should be an instance of `TypedArray`.\n   * @param {Number} size\n   * @param {Number} type\n   * @returns {Matrix} a magic square matrix of the specified `size` and `type`\n   **/\n  Matrix.magic = function (size, type) {\n    if (size < 0)\n      throw new Error('invalid size');\n\n    function f(n, x, y) {\n      return (x + y * 2 + 1) % n;\n    }\n\n    type = type || Float64Array;\n    var data = new type(size * size),\n        i, j;\n    for (i = 0; i < size; i++)\n      for (j = 0; j < size; j++)\n        data[(size - i - 1) * size + (size - j - 1)] =\n          f(size, size - j - 1, i) * size + f(size, j, i) + 1;\n\n    return Matrix.fromTypedArray(data, [size, size]);\n  };\n\n  /**\n   * Gets the diagonal of a matrix.\n   * @returns {Vector} the diagonal of the matrix as a vector\n   **/\n  Matrix.prototype.diag = function () {\n    var r = this.shape[0],\n        c = this.shape[1],\n        data = new this.type(Math.min(r, c)),\n        i;\n\n    for (i = 0; i < r && i < c; i++)\n      data[i] = this.data[i * c + i];\n\n    return new Vector(data);\n  };\n\n  /**\n   * Gets the determinant of any square matrix using LU factorization.\n   * @returns {Number} the determinant of the matrix\n   **/\n  Matrix.prototype.determinant = function () {\n    if (this.shape[0] !== this.shape[1])\n      throw new Error('matrix is not square');\n\n    var plu = Matrix.plu(this),\n        ipiv = plu.pop(),\n        lu = plu.pop(),\n        r = this.shape[0],\n        c = this.shape[1],\n        product = 1,\n        sign = 1,\n        i;\n\n    // get sign from ipiv\n    for (i = 0; i < r; i++)\n      if (i !== ipiv[i])\n        sign *= -1;\n\n    for (i = 0; i < r; i++)\n      product *= lu.data[i * c + i];\n\n    return sign * product;\n  };\n\n  /**\n   * Gets the trace of the matrix (the sum of all diagonal elements).\n   * @returns {Number} the trace of the matrix\n   **/\n  Matrix.prototype.trace = function () {\n    var diagonal = this.diag(),\n        result = 0,\n        i, l;\n\n    for (i = 0, l = diagonal.length; i < l; i++)\n      result += diagonal.get(i);\n\n    return result;\n  };\n\n  /**\n   * Static method. Checks the equality of two matrices `a` and `b`.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Boolean} `true` if equal, `false` otherwise\n   **/\n  Matrix.equals = function (a, b) {\n    return a.equals(b);\n  };\n\n  /**\n   * Checks the equality of `matrix` and current matrix.\n   * @param {Matrix} matrix\n   * @returns {Boolean} `true` if equal, `false` otherwise\n   **/\n  Matrix.prototype.equals = function (matrix) {\n    var r = this.shape[0],\n        c = this.shape[1],\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (r !== matrix.shape[0] || c !== matrix.shape[1] || this.type !== matrix.type)\n      return false;\n\n    var i;\n    for (i = 0; i < r * c; i++)\n      if (d1[i] !== d2[i])\n        return false;\n\n    return true;\n  };\n\n  /**\n   * Gets the value of the element in row `i`, column `j` of current matrix\n   * @param {Number} i\n   * @param {Number} j\n   * @returns {Number} the element at row `i`, column `j` of current matrix\n   **/\n  Matrix.prototype.get = function (i, j) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[1] - 1)\n      throw new Error('index out of bounds');\n\n    return this.data[i*this.shape[1]+j];\n  };\n\n  /**\n   * Sets the element at row `i`, column `j` to value\n   * @param {Number} i\n   * @param {Number} j\n   * @param {Number} value\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.set = function (i, j, value) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[1] - 1)\n      throw new Error('index out of bounds');\n\n    this.data[i*this.shape[1]+j] = value;\n    return this;\n  };\n\n  /**\n   * Swaps two rows `i` and `j` in a matrix\n   * @param {Number} i\n   * @param {Number} j\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.swap = function (i, j) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[0] - 1)\n      throw new Error('index out of bounds');\n\n    var c = this.shape[1];\n\n    // copy first row\n    var copy = this.data.slice(i * c, (i + 1) * c);\n    // move second row into first row spot\n    this.data.copyWithin(i * c, j * c, (j + 1) * c);\n    // copy first row back into second row spot\n    this.data.set(copy, j * c);\n\n    return this;\n  };\n\n  /**\n   * Maps a function `callback` to all elements of a copy of current matrix.\n   * @param {Function} callback\n   * @returns {Matrix} the resultant mapped matrix\n   **/\n  Matrix.prototype.map = function (callback) {\n    var r = this.shape[0],\n        c = this.shape[1],\n        data = new this.type(this.data),\n        i;\n\n    for (i = 0; i < r * c; i++)\n      data[i] = callback(data[i], i / c | 0, i % c, data);\n\n    return Matrix.fromTypedArray(data, [r, c]);\n  };\n\n  /**\n   * Functional version of for-looping the elements in a matrix, is\n   * equivalent to `Array.prototype.forEach`.\n   * @param {Function} callback\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.each = function (callback) {\n    var r = this.shape[0],\n        c = this.shape[1],\n        i;\n\n    for (i = 0; i < r * c; i++)\n      callback(this.data[i], i / c | 0, i % c, this.data);\n\n    return this;\n  };\n\n  /**\n   * Converts current matrix into a readable formatted string\n   * @returns {String} a string of the matrix' contents\n   **/\n  Matrix.prototype.toString = function () {\n    var result = [],\n        r = this.shape[0],\n        c = this.shape[1],\n        i;\n\n    for (i = 0; i < r; i++)\n      // get string version of current row and store it\n      result.push('[' + this.data.subarray(i * c, (i + 1) * c ).toString() + ']');\n\n    return '[' + result.join(', \\n') + ']';\n  };\n\n  /**\n   * Converts current matrix into a two-dimensional array\n   * @returns {Array} an array of the matrix' contents\n   **/\n  Matrix.prototype.toArray = function () {\n    var result = [],\n        r = this.shape[0],\n        c = this.shape[1],\n        i;\n\n    for (i = 0; i < r; i++)\n      // copy current row into a native array and store it\n      result.push(Array.prototype.slice.call(this.data.subarray(i * c, (i + 1) * c)));\n\n    return result;\n  };\n\n  /**\n   * Converts current matrix into a two-dimensional Vector\n   * @returns {Array} a Vector of the matrix' contents\n   **/\n  Matrix.prototype.toVector = function () {\n    var r = this.shape[0],\n        c = this.shape[1];\n\n    if (r !== 1 && c !== 1)\n      throw new Error('invalid matrix shape');\n\n    return new Vector(this.data);\n  };\n\n  module.exports = Matrix;\n}());\n\n},{\"./vector\":3}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  /**\n   * @method constructor\n   * @desc Creates a two-dimensional `Vector` from the supplied arguments.\n   **/\n  function Vector (data) {\n    this.type = Float64Array;\n    this.length = 0;\n\n    if (data instanceof Vector) {\n      this.combine(data);\n    } else if (data instanceof Array) {\n      this.data = new this.type(data);\n      this.length = data.length;\n    } else if (data && data.buffer && data.buffer instanceof ArrayBuffer) {\n      this.data = data;\n      this.length = data.length;\n      this.type = data.constructor;\n    }\n  }\n\n  /**\n   * Static method. Adds two vectors `a` and `b` together.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a vector containing the sum of `a` and `b`\n   **/\n  Vector.add = function (a, b) {\n    return new Vector(a).add(b);\n  };\n\n  /**\n   * Adds `vector` to the current vector.\n   * @param {Vector} vector\n   * @returns {Vector} this\n   **/\n  Vector.prototype.add = function (vector) {\n    var l1 = this.length,\n        l2 = vector.length;\n    if (l1 !== l2)\n      throw new Error('sizes do not match!');\n    if (!l1 && !l2)\n      return this;\n\n    var i;\n    for (i = 0; i < l1; i++)\n      this.data[i] += vector.data[i];\n\n    return this;\n  };\n\n  /**\n   * Static method. Subtracts the vector `b` from vector `a`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a vector containing the difference between `a` and `b`\n   **/\n  Vector.subtract = function (a, b) {\n    return new Vector(a).subtract(b);\n  };\n\n  /**\n   * Subtracts `vector` from the current vector.\n   * @param {Vector} vector\n   * @returns {Vector} this\n   **/\n  Vector.prototype.subtract = function (vector) {\n    var l1 = this.length,\n        l2 = vector.length;\n    if (l1 !== l2)\n      throw new Error('sizes do not match');\n\n    if (!l1 && !l2)\n      return this;\n\n    var i;\n    for (i = 0; i < l1; i++)\n      this.data[i] += vector.data[i];\n\n    return this;\n  };\n\n  /**\n   * Static method. Multiplies all elements of `vector` with a specified `scalar`.\n   * @param {Vector} vector\n   * @param {Number} scalar\n   * @returns {Vector} a resultant scaled vector\n   **/\n  Vector.scale = function (vector, scalar) {\n    return new Vector(vector).scale(scalar);\n  };\n\n  /**\n   * Multiplies all elements of current vector with a specified `scalar`.\n   * @param {Number} scalar\n   * @returns {Vector} this\n   **/\n  Vector.prototype.scale = function (scalar) {\n    var i;\n    for (i = this.length - 1; i >= 0; i--)\n      this.data[i] *= scalar;\n\n    return this;\n  };\n\n  /**\n   * Static method. Normalizes `vector`, i.e. divides all elements with the magnitude.\n   * @param {Vector} vector\n   * @returns {Vector} a resultant normalized vector\n   **/\n  Vector.normalize = function (vector) {\n    return new Vector(vector).normalize();\n  };\n\n  /**\n   * Normalizes current vector.\n   * @returns {Vector} a resultant normalized vector\n   **/\n  Vector.prototype.normalize = function () {\n    return this.scale(1 / this.magnitude());\n  };\n\n  /**\n   * Static method. Projects the vector `a` onto the vector `b` using\n   * the projection formula `(b * (a * b / b * b))`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a new resultant projected vector\n   **/\n  Vector.project = function (a, b) {\n    return a.project(new Vector(b));\n  };\n\n  /**\n   * Projects the current vector onto `vector` using\n   * the projection formula `(b * (a * b / b * b))`.\n   * @param {Vector} vector\n   * @returns {Vector} `vector`\n   **/\n  Vector.prototype.project = function (vector) {\n    return vector.scale(this.dot(vector) / vector.dot(vector));\n  };\n\n  /**\n   * Static method. Creates a vector containing zeros (`0`) of `count` size, takes\n   * an optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.zeros = function (count, type) {\n    if (count < 0)\n      throw new Error('invalid size');\n    else if (count === 0)\n      return new Vector();\n\n    type = type || Float64Array;\n    var data = new type(count),\n        i;\n\n    for (i = 0; i < count; i++)\n      data[i] = +0.0;\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector containing ones (`1`) of `count` size, takes\n   * an optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.ones = function (count, type) {\n    if (count < 0)\n      throw new Error('invalid size');\n    else if (count === 0)\n      return new Vector();\n\n    type = type || Float64Array;\n    var data = new type(count),\n        i;\n\n    for (i = 0; i < count; i++)\n      data[i] = 1;\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector containing a range (can be either ascending or descending)\n   * of numbers specified by the arguments provided (e.g. `Vector.range(0, .5, 2)`\n   * gives a vector containing all numbers in the interval `[0, 2)` separated by\n   * steps of `0.5`), takes an optional `type` argument which should be an instance of\n   * `TypedArray`.\n   * @param {Number} start\n   * @param {Number} step - optional\n   * @param {Number} end\n   * @returns {Vector} a new vector containing the specified range of the specified `type`\n   **/\n  Vector.range = function () {\n    var args = [].slice.call(arguments, 0),\n        backwards = false,\n        start, step, end;\n\n    var type = Float64Array;\n    if (typeof args[args.length - 1] === 'function')\n      type = args.pop();\n\n    switch(args.length) {\n      case 2:\n        end = args.pop();\n        step = 1;\n        start = args.pop();\n        break;\n      case 3:\n        end = args.pop();\n        step = args.pop();\n        start = args.pop();\n        break;\n      default:\n        throw new Error('invalid range');\n    }\n\n    if (end - start < 0) {\n      var copy = end;\n      end = start;\n      start = copy;\n      backwards = true;\n    }\n\n    if (step > end - start)\n      throw new Error('invalid range');\n\n    var data = new type(Math.ceil((end - start) / step)),\n        i, j;\n    for (i = start, j = 0; i < end; i += step, j++)\n      data[j] = backwards ? end - i + start : i;\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector of `count` elements containing random\n   * values between `0` and `1`, takes an optional `type` argument which\n   * should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.random = function (count, type) {\n    type = type || Float64Array;\n    var data = new type(count),\n        i;\n\n    for (i = 0; i < count; i++)\n      data[i] = Math.random();\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Performs dot multiplication with two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Number} the dot product of the two vectors\n   **/\n  Vector.dot = function (a, b) {\n    return a.dot(b);\n  };\n\n  /**\n   * Performs dot multiplication with current vector and `vector`\n   * @param {Vector} vector\n   * @returns {Number} the dot product of the two vectors\n   **/\n  Vector.prototype.dot = function (vector) {\n    if (this.length !== vector.length)\n      throw new Error('sizes do not match');\n\n    var a = this.data,\n        b = vector.data,\n        result = 0,\n        i, l;\n\n    for (i = 0, l = this.length; i < l; i++)\n      result += a[i] * b[i];\n\n    return result;\n  };\n\n  /**\n   * Calculates the magnitude of a vector (also called L2 norm or Euclidean length).\n   * @returns {Number} the magnitude (L2 norm) of the vector\n   **/\n  Vector.prototype.magnitude = function () {\n    if (!this.length)\n      return 0;\n\n    var result = 0,\n        data = this.data,\n        i, l;\n    for (i = 0, l = this.length; i < l; i++)\n      result += data[i] * data[i];\n\n    return Math.sqrt(result);\n  };\n\n  /**\n   * Static method. Determines the angle between two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Number} the angle between the two vectors in radians\n   **/\n  Vector.angle = function (a, b) {\n    return a.angle(b);\n  };\n\n  /**\n   * Determines the angle between the current vector and `vector`.\n   * @param {Vector} vector\n   * @returns {Number} the angle between the two vectors in radians\n   **/\n  Vector.prototype.angle = function (vector) {\n    return Math.acos(this.dot(vector) / this.magnitude() * vector.magnitude());\n  };\n\n  /**\n   * Static method. Checks the equality of two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Boolean} `true` if the two vectors are equal, `false` otherwise\n   **/\n  Vector.equals = function (a, b) {\n    return a.equals(b);\n  };\n\n  /**\n   * Checks the equality of the current vector and `vector`.\n   * @param {Vector} vector\n   * @returns {Boolean} `true` if the two vectors are equal, `false` otherwise\n   **/\n  Vector.prototype.equals = function (vector) {\n    if (this.length !== vector.length)\n      return false;\n\n    var a = this.data,\n        b = vector.data,\n        length = this.length,\n        i = 0;\n\n    while (i < length && a[i] === b[i])\n      i++;\n    return i === length;\n  };\n\n  /**\n   * Gets the element at `index` from current vector.\n   * @param {Number} index\n   * @returns {Number} the element at `index`\n   **/\n  Vector.prototype.get = function (index) {\n    if (index < 0 || index > this.length - 1)\n      throw new Error('index out of bounds');\n\n    return this.data[index];\n  };\n\n  /**\n   * Gets the minimum value (smallest) element of current vector.\n   * @returns {Number} the smallest element of the current vector\n   **/\n  Vector.prototype.min = function () {\n    var min = Number.POSITIVE_INFINITY,\n        data = this.data,\n        value,\n        i, l;\n\n    for (i = 0, l = data.length; i < l; i++) {\n      value = data[i];\n      if (value < min)\n        min = value;\n    }\n\n    return min;\n  };\n\n  /**\n   * Gets the maximum value (largest) element of current vector.\n   * @returns {Number} the largest element of current vector\n   **/\n  Vector.prototype.max = function () {\n    var max = Number.NEGATIVE_INFINITY,\n        data = this.data,\n        value,\n        i, l;\n\n    for (i = 0, l = this.length; i < l; i++) {\n      value = data[i];\n      if (value > max)\n        max = value;\n    }\n\n    return max;\n  };\n\n  /**\n   * Sets the element at `index` to `value`.\n   * @param {Number} index\n   * @param {Number} value\n   * @returns {Vector} this\n   **/\n  Vector.prototype.set = function (index, value) {\n    if (index < 0 || index > this.length - 1)\n      throw new Error('index out of bounds');\n\n    this.data[index] = value;\n    return this;\n  };\n\n  /**\n   * Static method. Combines two vectors `a` and `b` (appends `b` to `a`).\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} `b` appended to vector `a`\n   **/\n  Vector.combine = function (a, b) {\n    return new Vector(a).combine(b);\n  };\n\n  /**\n   * Combines the current vector with `vector`\n   * @param {Vector} vector\n   * @returns {Vector} `vector` combined with current vector\n   **/\n  Vector.prototype.combine = function (vector) {\n    if (!vector.length)\n      return this;\n    if (!this.length) {\n      this.data = new vector.type(vector.data);\n      this.length = vector.length;\n      this.type = vector.type;\n      return this;\n    }\n\n    var l1 = this.length,\n        l2 = vector.length,\n        d1 = this.data,\n        d2 = vector.data;\n\n    var data = new this.type(l1 + l2);\n    data.set(d1);\n    data.set(d2, l1);\n\n    this.data = data;\n    this.length = l1 + l2;\n\n    return this;\n  };\n\n  /**\n   * Pushes a new `value` into current vector.\n   * @param {Number} value\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.push = function (value) {\n    return this.combine(new Vector([value]));\n  };\n\n  /**\n   * Maps a function `callback` to all elements of current vector.\n   * @param {Function} callback\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.map = function (callback) {\n    var i;\n    for (i = 0; i < this.length; i++)\n      this.data[i] = callback(this.data[i]);\n\n    return this;\n  };\n\n  /**\n   * Functional version of for-looping the vector, is equivalent\n   * to `Array.prototype.forEach`.\n   * @param {Function} callback\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.each = function (callback) {\n    var i;\n    for (i = 0; i < this.length; i++)\n      callback(this.data[i], i);\n\n    return this;\n  };\n\n  /**\n   * Converts current vector into a readable formatted string.\n   * @returns {String} a string of the vector's contents\n   **/\n  Vector.prototype.toString = function () {\n    var result = '',\n        i;\n    for (i = 0; i < this.length; i++)\n      result += i > 0 ? ', ' + this.data[i] : this.data[i];\n\n    return '[' + result + ']';\n  };\n\n  /**\n   * Converts current vector into a JavaScript array.\n   * @returns {Array} an array containing all elements of current vector\n   **/\n  Vector.prototype.toArray = function () {\n    if (!this.data)\n      return [];\n\n    return Array.prototype.slice.call(this.data);\n  };\n\n  module.exports = Vector;\n}());\n\n},{}],4:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var Vector = require('./vector'),\n      Matrix = require('./matrix');\n  try {\n    var nblas = require('nblas');\n  } catch (error) {\n    module.exports.Vector = Vector;\n    module.exports.Matrix = Matrix;\n    return;\n  }\n\n  // BLAS optimizations\n  Vector.prototype.add =\n  Matrix.prototype.add = function (data) {\n    var l1 = this instanceof Vector ? this.length : this.shape[0] * this.shape[1],\n        l2 = data instanceof Vector ? data.length : data.shape[0] * data.shape[1];\n    if (l1 !== l2)\n      throw new Error('sizes do not match!');\n    if (!l1 && !l2)\n      return this;\n\n    nblas.axpy(data.data, this.data);\n    return this;\n  };\n\n  Vector.prototype.subtract =\n  Matrix.prototype.subtract = function (data) {\n    var l1 = this instanceof Vector ? this.length : this.shape[0] * this.shape[1],\n        l2 = data instanceof Vector ? data.length : data.shape[0] * data.shape[1];\n    if (l1 !== l2)\n      throw new Error('sizes do not match!');\n    if (!l1 && !l2)\n      return this;\n\n    nblas.axpy(data.data, this.data, -1);\n    return this;\n  };\n\n  Vector.prototype.scale =\n  Matrix.prototype.scale = function (scalar) {\n    nblas.scal(this.data, scalar);\n    return this;\n  };\n\n  Vector.prototype.dot = function (vector) {\n    if (this.length !== vector.length)\n      throw new Error('sizes do not match!');\n\n    return nblas.dot(this.data, vector.data);\n  };\n\n  Vector.prototype.magnitude = function () {\n    if (!this.length)\n      return 0;\n\n    return nblas.nrm2(this.data);\n  };\n\n  Vector.prototype.max = function() {\n    return this.data[nblas.idamax(this.length, this.data, 1)];\n  };\n\n  Matrix.prototype.multiply = function(matrix) {\n    var r1 = this.shape[0],\n        c1 = this.shape[1],\n        r2 = matrix.shape[0],\n        c2 = matrix.shape[1],\n        data = new this.type(r1 * c2);\n\n    if (c1 !== r2)\n      throw new Error('sizes do not match');\n\n    nblas.gemm(this.data, matrix.data, data, r1, c2, c1);\n    return Matrix.fromTypedArray(data, [r1, c2]);\n  };\n\n  module.exports.Vector = Vector;\n  module.exports.Matrix = Matrix;\n}());\n\n},{\"./matrix\":1,\"./vector\":3,\"nblas\":2}]},{},[4])(4)\n});"],"sourceRoot":"/source/"}